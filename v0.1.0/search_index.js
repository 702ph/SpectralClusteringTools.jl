var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SpectralClusteringTools","category":"page"},{"location":"#SpectralClusteringTools","page":"Home","title":"SpectralClusteringTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for Spectral Clustering.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for creating test data and providing functions to facilitate clustering analysis.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tools for generating synthetic test datasets for clustering experiments.\nFunctions for preprocessing data to prepare for spectral clustering.\nImplementation of spectral clustering algorithms.\nUtilities for visualizing clustering results and data distributions.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install using the Julia's package manager. In the Julia REPL, type `] for entering the Pkg REPL mode and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add \"https://github.com/702ph/SpectralClusteringTools.jl\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"type CTRL + C to back the Julia REPL. Equivalently with the Pkg API:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg \nJulia> Pkg.add(url=\"https://github.com/702ph/SpectralClusteringTools.jl\")","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using SpectralClusteringTools\nusing Plots\nimport PlotlyJS\n\n\n# Use Plotly as the backend for Plots.jl\nplotlyjs()\n\n# A function for visualize given data as a 3D scatter plot grouped by labels.\nfunction plot_data(data, labels, title=\"Visualization\")\n    scatter3d(data[:, 1], data[:, 2], data[:, 3],\n              group=labels, title=title,\n              xlabel=\"X\", ylabel=\"Y\", zlabel=\"Z\", aspect_ratio=:auto,\n              markersize=0.5)\nend\n\n\n# Generate test data\nsphere_data, sphere_labels = make_sphere(3, 200)\n\n\n# Visualize data\nplot_data(sphere_data, sphere_labels, \"Multiclass Spheres(Original)\")\n\n\n# Clustering \n#TODO: add or fixcode here\ngraph = epsilon_neighborhood_graph(sphere_data)\n???? = next_fuction(graph)\n\nclustered_labels = ????(???)\n\n\n# Visualize\n#TODO: add or fix code here\nplot_data(sphere_data, clustered_labels, \"Multiclass Spheres(Clustered)\")\n","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SpectralClusteringTools's interface.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SpectralClusteringTools]","category":"page"},{"location":"#SpectralClusteringTools.SpectralClusteringParams","page":"Home","title":"SpectralClusteringTools.SpectralClusteringParams","text":"Construct a similarity graph. W: weighted adjacency matrix(A Tutorial on Spectral Clustering P7)\n\n● According to the reference, there are three ways to do it:     (1) The ε-neighborhood graph     (2) k-nearest neighbor graphs     (3) The fully connected graph ● Parameters for Spectral clustering\n\n\n\n\n\n","category":"type"},{"location":"#SpectralClusteringTools.fully_connected_graph-Tuple{Matrix{Float64}, Float64}","page":"Home","title":"SpectralClusteringTools.fully_connected_graph","text":"● Construct fully connected graph ● Connect all points with positive similarity with each other ● Weight all edge by sij ● Only useful if the similarity function itself models local neighbors， example: Gaussian\n\n\n\n\n\n","category":"method"},{"location":"#SpectralClusteringTools.make_sphere","page":"Home","title":"SpectralClusteringTools.make_sphere","text":"make_sphere(num_classes::Int, num_points_per_class::Int; adjust_scale::Bool=true)\n\nGenerates a dataset of points distributed on the surfaces of spheres。  Each sphere corresponds to a class, and points are normalized.\n\nArguments\n\nnum_classes: Number of spheres (classes) to generate.\nnum_points_per_class:  Number of points per class.\nadjust_scale: Adjusts the number of points.\n\nReturns\n\nA tuple of (normalized_points, labels), where normalized_points is a matrix of 3D points, and labels indicates class membership.\n\nExample\n\npoints, labels = make_sphere(3, 1000, false)\n\n\n\n\n\n","category":"function"},{"location":"#SpectralClusteringTools.timestwo-Tuple{Any}","page":"Home","title":"SpectralClusteringTools.timestwo","text":"timestwo(x)\n\nMultiply the input x by two.\n\n\n\n\n\n","category":"method"}]
}
